#!/bin/bash

SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
POSITIONAL_ARGS=()
WORKING_DIR=cve-scan
DIR=
FILE=
HEADER=

parse_args() {
    while [[ $# -gt 0 ]]; do
    case $1 in
        -o|--outdir)
        WORKING_DIR="$2"
        shift # past argument
        shift # past value
        ;;
        -r|--reportfile)
        REPORT_FILE="$2"
        shift # past argument
        shift # past value
        ;;
        -d|--dir)
        DIR="$2"
        shift # past argument
        shift # past value
        ;;
        -f|--file)
        FILE="$2"
        shift # past argument
        shift # past value
        ;;
        --default)
        DEFAULT=YES
        shift # past argument
        ;;
        -*|--*)
        echo "Unknown option $1"
        exit 1
        ;;
        *)
        POSITIONAL_ARGS+=("$1") # save positional arg
        shift # past argument
        ;;
    esac
    done
    echo "WORKING_DIR=$WORKING_DIR"
    echo "DIR=$DIR"
    echo "FILE=$FILE"
}

init() {
    # WORKING_DIR=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')
    mkdir -p $WORKING_DIR
}

scan_file() {
    local filepath=$1
    local p="${filepath##*/}";
    local syft_file="$WORKING_DIR/$p-sbom.json"
    local grype_file="$WORKING_DIR/$p-cves.csv"
    if [ ! -f $syft_file ]; then
        echo "Creating SBOM for $filepath";
        syft $filepath -o json=$syft_file;
    fi
    if [ ! -f $grype_file ]; then
        echo "Scanning $syft_file";
        csv_template
        grype $syft_file --by-cve -o template -t "$WORKING_DIR/grype_csv.tmpl" --file $grype_file
    fi
    if [ ! -z "$REPORT_FILE" ] && [ -s $grype_file ]; then
        echo "Concatenating report $REPORT_FILE";
        if [ -z $HEADER ]; then
            HEADER=true
            head -n 1 $grype_file | sed "s/^/\"File\",/" > "$WORKING_DIR/$REPORT_FILE"
        fi
        tail -n +2 $grype_file | sed "s/^/\"$p\",/" >> "$WORKING_DIR/$REPORT_FILE"
    fi
}

scan () {
    if [ ! -z "$FILE" ]; then
        echo "Scanning file: $FILE"
        scan_file $FILE
    elif [ ! -z "$DIR" ]; then
        echo "Scanning $DIR"
        for f in $(find $DIR -type f \( -iname \*.jar -o -iname \*.war -o -iname \*.ear  -o -iname \*.tar \) );
        do
            scan_file $f
        done
    else
        echo "Specify file (-f file) or dir (-d dir) to scan"
    fi
}

csv_template () {
    if [ ! -f "$WORKING_DIR/grype_csv.tmpl" ];
    then
cat <<- EOF > "$WORKING_DIR/grype_csv.tmpl"
"Package","Version Installed","Vulnerability ID","Severity"
{{- range .Matches}}
"{{.Artifact.Name}}","{{.Artifact.Version}}","{{.Vulnerability.ID}}","{{.Vulnerability.Severity}}"
{{- end}}
EOF
    fi
}

parse_args $@
init
scan
