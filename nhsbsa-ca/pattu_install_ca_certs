#!/bin/bash

JAVA_HOME=${JAVA_HOME:-`/usr/libexec/java_home`}
SYSTEM_KEYCHAIN="/Library/Keychains/System.keychain"
KS_PASS=changeit
WORKING_DIR=/var/tmp
ROOT_CERT=nhsbsa_aws_ca_2019-2029.pem
INT_CERT=nhsbsa_aws_int_ca_2019-2024.pem
USER=pattu

function cert_exists {
  if [ ! -f $WORKING_DIR/$1 ]; then
    echo "Cert doesn't exist: $WORKING_DIR/$1. Copy root and intermediate files into $WORKING_DIR"
    exit 1
  fi
}


# Check if we're root and re-execute if we're not.
rootcheck () {
    if [ $(id -u) != "0" ]
    then
      echo this script must run as root. You may be prompted for your OS password
      sudo "$0" "$@"
      exit $?
    fi
}

# find cacerts files
function find_cacerts {
  echo
  if [ ! -f $WORKING_DIR/.cacerts ]; then
    echo "finding cacerts to update..."
    find / -name cacerts -print 2>/dev/null | grep -v System > $WORKING_DIR/.cacerts
    echo "scan of system found these 'cacerts' files:"
  else
    echo "previous scan of system found these 'cacerts' files:"
  fi
  echo
  cat $WORKING_DIR/.cacerts | sed 's/^/  /'
  echo
  echo "They will be updated with the NHSBSA root and intermediate certificates you provide."
  echo "Delete this cache file and rerun script to rescan:"
  echo
  echo "  rm $WORKING_DIR/.cacerts"
}

# add trusted cert for root cert
function add_trusted_cert_os {
  sudo security add-trusted-cert -d -r trustRoot -k $SYSTEM_KEYCHAIN "$1"
}

# import cert for intermediate cert
function import_cert_os {
  sudo security import "$1" -k /Library/Keychains/System.keychain
}

# remove an aliased cert
function remove_cert_jre {
  cert_pattern=$1
  cacert=$2
  keytool -v -list -storepass changeit -keystore "$cacert" | grep Alias | awk '{print $3}' |
  grep "$cert_pattern" | while read alias
  do
    echo "deleting alias $alias in $cacert:"
    keytool -delete -alias $alias -storepass changeit -keystore "$cacert"
  done
}


# remove an aliased cert from all jres
function remove_cert_all_jre {
  cert_pattern=$1
  echo
  echo "checking existing alias matching '$cert_pattern' from all JRE cacert files"
  cat $WORKING_DIR/.cacerts | while read cacert
  do
    remove_cert_jre $cert_pattern $cacert
  done
}

# install cert in JRE
function install_cert_jre {
  cert_name=$(basename $1)
  cat $WORKING_DIR/.cacerts | while read cacert
  do
    # double check removal by cert filename alias
    remove_cert_jre $cert_name $cacert
    echo
    echo "adding cert alias $cert_name from $1 in $cacert"
    keytool -import -alias $cert_name -file $WORKING_DIR/$1 -noprompt -trustcacerts -storepass changeit -keystore "$cacert"
  done
}

# install cert in minikube
function install_cert_minikube {
  if [ -d /users/$USER/.minikube ]; then
    echo "adding $1 to minikube certs..."
    echo
    cp $WORKING_DIR/$1 /users/$USER/.minikube/certs
  fi
}

# force run as root
rootcheck

# check certs are ready to install
cert_exists $ROOT_CERT
cert_exists $INT_CERT

# find cacerts in this system
find_cacerts

# remove nhsbsa named certs
remove_cert_all_jre nhsbsa

# root cert
add_trusted_cert_os $ROOT_CERT
install_cert_jre $ROOT_CERT
install_cert_minikube $ROOT_CERT

# int cert
echo
echo "Intermediate certificate"
echo
import_cert_os $INT_CERT
install_cert_jre $INT_CERT
install_cert_minikube $INT_CERT

# report back
echo
echo "cacerts imported"
echo

# minikube warning
if [ -d /users/pattu/.minikube ]; then
  echo "minukube must be restarted with the --embed-certs flag to sync the certificates:"
  echo
  echo "  minikube start --embed-certs"
  echo
  cp $1 /users/pattu/.minikube/certs
fi
